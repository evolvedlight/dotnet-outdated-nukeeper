# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: dotnet nuget build and package

permissions:
  contents: "write"
  packages: "write"
  pull-requests: "read"

on:
  [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p .sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: |
        .sonar/scanner/dotnet-sonarscanner begin /k:"evolvedlight_neukeeper" /o:"stephen-brown" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet pack neukeeper/neukeeper.csproj -c release -p:PackageVersion=0.0.${{github.run_number}} --output nupkgs /p:Version=0.0.${{github.run_number}}
        .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
    - name: Upload nuget
      uses: actions/upload-artifact@v3
      with:
        name: nugets
        path: |
          nupkgs/*.nupkg
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Test with dotnet
      run: dotnet test --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-results-${{ matrix.dotnet-version }}
        path: TestResults-${{ matrix.dotnet-version }}
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
  publish:
    runs-on: ubuntu-latest
    needs: build
    environment: Nuget Prod
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Download nuget to publish
      uses: actions/download-artifact@v3
      with:
        name: nugets
    - name: Push nuget
      run: |
        ls
        dotnet nuget push *.nupkg --api-key ${{secrets.nuget_api_key}} --source https://api.nuget.org/v3/index.json
    - name: create github release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        automatic_release_tag: "latest"
        title: "Release 0.0.${{github.run_number}}"
        files: |
          *.nupkg